import os
from datetime import datetime

import pytz
import requests
from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, FSInputFile

import config
import database
import kb
import utils
from admins import log_conversion, log_wrong_extension, admin_chat, log_merge
from database import *
from model import DocumentData, ConversionData
from pdfengine import merge_pdf

bot = Bot(token=config.BOT_TOKEN)
router = Router()


class Form(StatesGroup):
    merging = State()
    common = State()
    complaining = State()
    heif_waiting = State()


@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    hour = datetime.now(pytz.timezone('Europe/Moscow')).hour
    if hour < 6:
        greeting = '–î–æ–±—Ä–æ–π –Ω–æ—á–∏!'
    elif 6 <= hour < 12:
        greeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!'
    elif 12 <= hour <= 17:
        greeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!'
    else:
        greeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!'

    await message.answer(greeting + '\n–Ø –º–æ–≥—É –±—É–∫–≤–∞–ª—å–Ω–æ —á—Ç–æ —É–≥–æ–¥–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ <b>pdf</b>.\n'
                                    '–¢–∞–∫–∂–µ —è —É–º–µ—é —Å–∫–ª–µ–∏–≤–∞—Ç—å <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤</b> –≤ –æ–¥–∏–Ω —Ü–µ–ª—å–Ω—ã–π <b>pdf</b>.\n'
                                    '–ò –∫—Å—Ç–∞—Ç–∏, —É –º–æ–∏—Ö —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º —Ñ–∞–π–ª–∞–º, '
                                    '–∞ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å—Ç–∏—Ä–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞üßê\n'
                                    '–í–Ω–∏–∑—É –µ—Å—Ç—å –º–µ–Ω—é –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n'
                                    '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª!üòé', parse_mode='HTML',
                         reply_markup=kb.main_kb(message.from_user.id))
    await state.set_state(Form.common)


@router.message(F.text == "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Form.complaining)
async def main_menu_after_complain(msg: Message, state: FSMContext):
    await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n"
                     "ü´° –Ø –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–ª—å—à–µ!",
                     reply_markup=kb.main_kb(msg.from_user.id))
    await state.set_state(Form.common)


@router.message(F.text == "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(msg: Message, state: FSMContext):
    await msg.answer("ü´° –Ø –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–ª—å—à–µ!",
                     reply_markup=kb.main_kb(msg.from_user.id))
    await state.set_state(Form.common)


@router.message(F.text == "–û –Ω–∞—Å")
async def about_handler(msg: Message):
    await msg.answer(
        "–ë–æ—Ç —Ç—Ä–µ–ø–µ—Ç–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ <b>1113tech</b>.\n –ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å –æ –ë–æ—Ç–µ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
        " –¥–ª—è —Å–µ–±—è –∏–ª–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @ttoomm\n"
        "–°–¥–µ–ª–∞–µ–º –≤—Å–µ –∫—Ä–∞—Å–∏–≤–æ ü•¶", parse_mode='HTML', reply_markup=kb.main_menu_button(msg.from_user.id))


@router.message(F.text == "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
async def convert_button_handler(msg: Message, state: FSMContext):
    await msg.answer("–ü—Ä–æ—Å—Ç–æ –ø–æ—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å!",
                     reply_markup=kb.choose_mode(msg.from_user.id))
    await state.set_state(Form.common)


@router.message(F.text == "üçè .HEIC ‚û°Ô∏è.JPEG")
async def convert_heif_handler(msg: Message, state: FSMContext):
    await msg.answer("–ü—Ä–æ—Å—Ç–æ –ø–æ—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .HEIC/.HEIF",
                     reply_markup=kb.choose_mode(msg.from_user.id))
    await state.set_state(Form.heif_waiting)


@router.message(F.document, Form.heif_waiting)
async def heif_converter(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    document = DocumentData()
    await document.from_message(msg)
    file_name = document.get_full_name()
    extension = document.extension
    if extension in ('.HEIC', '.heic', '.HEIF', '.heif'):
        await msg.answer(f"–°–∫–∞—á–∏–≤–∞—é –≤–∞—à {extension} —Ñ–∞–π–ª...")
        os.makedirs(f'upload{user_id}', exist_ok=True)
        os.makedirs(f'converted{user_id}', exist_ok=True)
        await bot.download(document.file_id, f'upload{user_id}/{file_name}')

        await msg.answer("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ .JPEG...")
        conversion = utils.heic2jpg(document, user_id)

        await send_document(msg, conversion)

        utils.remove_files(f'upload{user_id}/')
        utils.remove_files(f'converted{user_id}/')
        os.removedirs(f'upload{user_id}')
        os.removedirs(f'converted{user_id}')
        await log_conversion(msg, conversion)

    else:
        await msg.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ .HEIC/.HEIF, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {document.extension}\n"
                         f"–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await log_wrong_extension(msg, document.extension)


@router.message(F.text == "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ")
async def complain_handler(msg: Message, state: FSMContext):
    await state.set_state(Form.complaining)
    await msg.answer("–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã/—Å–∫—Ä–∏–Ω—ã ‚úçüèº\n"
                     "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å  - –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                     reply_markup=kb.main_menu_button(msg.from_user.id))


@router.message(Form.complaining)
async def complain_message_handler(msg: Message):
    await bot.forward_message(admin_chat, msg.from_user.id, msg.message_id)


@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" or F.text == "stats")
async def stats_handler(msg: Message, state: FSMContext):
    db = Session()
    total_c = db.query(ConversionRecord).count()
    successful_c = db.query(ConversionRecord).filter(ConversionRecord.is_successful).count()
    failed_c = total_c - successful_c

    total_m = db.query(MergeRecord).count()
    successful_m = db.query(MergeRecord).filter(MergeRecord.is_successful).count()
    failed_m = total_m - successful_m

    users_res_c = '\n<b>–°—Ç–∞—Å—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>\n'
    for res in database.get_users_conversions(db):
        user = await bot.get_chat(res[0])
        users_res_c += f'@{user.username} —Å–¥–µ–ª–∞–ª {res[1]} –∫–æ–Ω–≤–µ—Ä—Å–∏–π\n'

    users_res_m = '\n<b>–°—Ç–∞—Å—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>\n'
    for res in database.get_users_merges(db):
        user = await bot.get_chat(res[0])
        users_res_m += f'@{user.username} —Å–¥–µ–ª–∞–ª {res[1]} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π\n'

    await msg.answer(f"<b>–í—Å–µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–π: {total_c}</b>\n"
                     f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_c}\n"
                     f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {failed_c}\n"
                     f"{users_res_c}"
                     f"\n<b>–í—Å–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π: {total_m}</b>\n"
                     f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_m}\n"
                     f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {failed_m}\n"
                     f"{users_res_m}", parse_mode='HTML',
                     reply_markup=kb.main_menu_button(msg.from_user.id))


@router.message(F.document | F.photo, Form.common)
async def document_converter(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    document = DocumentData()
    await document.from_message(msg)
    file_name = document.get_full_name()
    if utils.is_valid_extension(document.extension):
        await msg.answer("–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        os.makedirs(f'upload{user_id}', exist_ok=True)
        os.makedirs(f'converted{user_id}', exist_ok=True)
        await bot.download(document.file_id, f'upload{user_id}/{file_name}')

        await msg.answer("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é...")
        conversion = utils.convert_document(document, user_id)

        await send_document(msg, conversion)

        utils.remove_file(f'upload{user_id}/{file_name}')
        utils.remove_file(f'converted{user_id}/{document.raw_name + ".pdf"}')
        os.removedirs(f'upload{user_id}')
        os.removedirs(f'converted{user_id}')

        await log_conversion(msg, conversion)

    else:
        await msg.answer(f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ '{document.extension}' –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")
        await log_wrong_extension(msg, document.extension)


async def send_document(msg: Message, conversion: ConversionData):
    code = conversion.code
    path = conversion.doc.path
    user_id = msg.from_user.id
    if code == 200:
        file = FSInputFile(path)
        file.filename = conversion.doc.get_full_name()
        await msg.answer_document(file, caption="–í–∞—à —Ñ–∞–π–ª –≤ PDF",
                                  reply_markup=kb.main_menu_button(user_id))
    else:
        await error_handler(msg, code)


@router.message(F.text == '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω pdf')
async def merge_button_handler(msg: Message, state: FSMContext):
    await state.set_state(Form.merging)
    await msg.answer("–ü–æ—Å—ã–ª–∞–π—Ç–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ PDF-–¥–æ–∫—É–º–µ–Ω—Ç\n"
                     "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>'–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã!'</b>",
                     parse_mode='HTML',
                     reply_markup=kb.main_menu_button(msg.from_user.id))


@router.message(F.document | F.photo, Form.merging)
async def merging_docs_handler(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    document = DocumentData()
    await document.from_message(msg)
    file_name = document.get_full_name()
    extension = document.extension
    if utils.is_valid_extension(extension):
        db = Session()
        create_document(db, msg.document.file_id, extension, user_id, False)
    else:
        await msg.answer(f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ '{extension}' –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n"
                         f"–§–∞–π–ª '{file_name}' –Ω–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ..")
        await log_wrong_extension(msg, extension)
    await msg.answer("–ñ–¥—É —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è\n"
                     "–ß—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã,"
                     " –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ <b>'–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã!'</b>",
                     parse_mode='HTML', reply_markup=kb.convert_all_button(user_id))


@router.message(F.text == "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–∞–π–ª—ã!")
async def merge(msg):
    await msg.answer("–ò–¥–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    user_id = msg.from_user.id
    i = 0
    files = []
    document_data = []
    directory = f"upload{user_id}"
    os.makedirs(directory, exist_ok=True)
    db = Session()
    documents = get_files_of_user(db, user_id)
    for file in documents:
        await bot.download(file.file_id, f"{directory}/file{str(i)}{file.extension}")
        await msg.answer(f"{i + 1}/{len(documents)} —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ ")
        files.append(('files', open(f'{directory}/file{str(i)}{file.extension}', 'rb')))
        doc = DocumentData(f'file{str(i)}', file.file_id, file.extension, file.extension)
        document_data.append(doc)
        i += 1
    if files:
        if all(ext == '.pdf' or ext == '.PDF' for ext in map(lambda document: document.extension, documents)):
            await msg.answer("–í—Å–µ –≤–∞—à–∏ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ PDF! –ü—Ä–æ—Ü–µ—Å—Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–π–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ! ‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è")
            merge_result = merge_pdf(files, msg)
            code = merge_result.code
            conversion = ConversionData(code, merge_result.doc)
            await send_document(msg, conversion)
            log_merge(msg, conversion)
        else:
            try:
                await msg.answer("–§–∞–π–ª—ã —Å–∫–∞—á–∞–Ω—ã ‚úÖ . –ò–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                os.makedirs(f'converted{user_id}', exist_ok=True)
                paths = []
                for doc in document_data:
                    utils.convert_document(doc, f'{user_id}')
                    paths.append(('files', open(f'converted{user_id}/{doc.get_full_name()}', 'rb')))
                merge_result = merge_pdf(paths, msg)
                code = merge_result.code
                conversion = ConversionData(code, merge_result.doc)
                await send_document(msg, conversion)
                log_merge(msg, conversion)
            except requests.exceptions.ConnectionError:
                await msg.answer("–°–µ—Ä–≤–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=kb.main_menu_button(user_id))
                db = Session()
                create_merge_record(db, user_id, False, False)

        utils.remove_files(f'upload{user_id}')
        utils.remove_files(f'converted{user_id}')
        utils.remove_file(f'converted/file{user_id}.pdf')
        delete_files_of_user(db, user_id)
    else:
        await msg.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è",
                         reply_markup=kb.main_menu_button(user_id))


async def error_handler(msg: Message, code: int):
    user_id = msg.from_user.id
    if code == 400:
        await msg.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º", reply_markup=kb.main_menu_button(user_id))

    elif code == 503:
        await msg.answer("–°–µ—Ä–≤–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                         reply_markup=kb.main_menu_button(user_id))
    else:
        await msg.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É \n @dvnovik",
                         reply_markup=kb.main_menu_button(user_id))
